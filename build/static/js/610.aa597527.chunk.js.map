{"version":3,"file":"static/js/610.aa597527.chunk.js","mappings":"wKAQA,EAJkB,SAAHA,GAA6D,IAAvDC,EAAQD,EAARC,SACnB,OAAOC,EAAAA,EAAAA,KAAA,OAAKC,UAAU,YAAWF,SAAEA,GACrC,C,mECWA,IAfwB,SAAeG,GACrC,IAAAC,GAA4BC,EAAAA,EAAAA,UAASF,GAAaG,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA3CI,EAAMF,EAAA,GAAEG,EAASH,EAAA,GAExB,MAAO,CACLE,EACA,SAACE,GACCD,GAASE,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EACNH,GAAM,IAAAI,EAAAA,EAAAA,GAAA,GACRF,EAAMG,OAAOC,KAAOJ,EAAMG,OAAOE,QAGtC,EAEJ,C,oICfaC,EAAoB,SAAeC,GAG9C,IAFA,IAEAC,EAAA,EAAAC,EAFeC,OAAOC,OAAOJ,GAEHC,EAAAC,EAAAG,OAAAJ,IAAE,CAAvB,IAAMH,EAAKI,EAAAD,GACd,GAAqB,kBAAVH,GAAuC,IAAjBA,EAAMO,OACrC,OAAO,CAEX,CAEA,OAAO,CACT,E,mBCsEA,GAAeC,EAAAA,EAAAA,IAAQ,MAJI,SAACC,GAAkB,MAAM,CAClDC,QAAS,SAACC,GAAc,OAAKF,GCjEJG,EDiEwBD,ECjEE,CACnDE,KAAMC,EAAAA,EAAWC,aACjBH,QAAAA,KAFwB,IAACA,CDiE8B,EACxD,GAED,EAtDqC,SAAH5B,GAAyB,IAAnBgC,EAAEhC,EAAFgC,GAAIN,EAAO1B,EAAP0B,QACpCO,EAAO,IAAIC,KAAKA,KAAKC,OAE3BC,GAAoCC,EAAAA,EAAAA,GAA0B,CAC5DC,MAAO,GACPC,YAAa,GACbC,WAAYR,EACZS,WAAYR,IACZS,GAAAlC,EAAAA,EAAAA,GAAA4B,EAAA,GALK3B,EAAMiC,EAAA,GAAEC,EAAiBD,EAAA,GAchC,OACEE,EAAAA,EAAAA,MAAA,QAAMzC,UAAU,gBAAgB0C,OAAO,SAASC,SAR7B,SAACC,GACpBA,EAAEC,iBACGvC,GAELiB,EAAQjB,EACV,EAGyER,SAAA,EACrE2C,EAAAA,EAAAA,MAAA,OAAKzC,UAAU,YAAWF,SAAA,EACxBC,EAAAA,EAAAA,KAAA,SAAO+C,QAAQ,QAAOhD,SAAC,UACvBC,EAAAA,EAAAA,KAAA,SACEa,KAAK,QACLc,KAAK,OACLb,MAAOP,EAAO6B,MACdY,SAAUP,QAIdC,EAAAA,EAAAA,MAAA,OAAKzC,UAAU,YAAWF,SAAA,EACxBC,EAAAA,EAAAA,KAAA,SAAO+C,QAAQ,cAAahD,SAAC,iBAC7BC,EAAAA,EAAAA,KAAA,SACEa,KAAK,cACLc,KAAK,OACLb,MAAOP,EAAO8B,YACdW,SAAUP,QAIdzC,EAAAA,EAAAA,KAAA,UACEiD,UAAWlC,EAAkBR,GAC7BN,UAAU,UACV0B,KAAK,SAAQ5B,SACd,iDAKP,I,UE1EamD,EAAsB,SAACnB,GAClC,OAAIA,EACGA,EAAKoB,MAAM,EAAG,IAAIC,MAAM,KAAKC,UAAUC,KAAK,KADlC,EAEnB,ECHaC,EAAQ,CACnB,MACA,KACA,OACA,OACA,MACA,YACA,UACA,UACA,UACA,UACA,SACA,SACA,OACA,QACA,QACA,QACA,SACA,QACA,QACA,SACA,QACA,SACA,MACA,SACA,QACA,QACA,QACA,UACA,OACA,SACA,QACA,QACA,UACA,YACA,QACA,OACA,QACA,SACA,YACA,QACA,OACA,QACA,UACA,WACA,MACA,WACA,UACA,WACA,QACA,UACA,SACA,QACA,SACA,QACA,SACA,WACA,WACA,SACA,QACA,QACA,QACA,QACA,QACA,MACA,SACA,OACA,QACA,UACA,UACA,OACA,WACA,QACA,QACA,QACA,SACA,SACA,QACA,QACA,OACA,OACA,QACA,OACA,SACA,SACA,QACA,QACA,UACA,OACA,WACA,OACA,SACA,UACA,YACA,WACA,SACA,SACA,SACA,SACA,QACA,SACA,UACA,QACA,OACA,OACA,aACA,WACA,SACA,WACA,WACA,SACA,SACA,QACA,QACA,UACA,MACA,WACA,OACA,QACA,SACA,OACA,YCTF,GAAejC,EAAAA,EAAAA,IAAQ,MAJI,SAACC,GAAkB,MAAM,CAClDiC,aAAc,SAACC,GAAoB,OAAKlC,GH9DXG,EG8DmC+B,EH9DC,CACjE9B,KAAMC,EAAAA,EAAW8B,iB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","sources":["components/Container.tsx","hooks/useHandleFields.tsx","utils/checkInputsLength.ts","components/AddTaskForm.tsx","core/actionCreators/tasksActionCreators.ts","utils/convertDateToNormal.ts","config/users.ts","components/Comment.tsx","components/CommentsContainer.tsx","components/SubTask.tsx","components/SubTasksContainer.tsx","components/TaskInfoForm.tsx","components/EditTaskForm.tsx","components/Drag.tsx","components/Modal.tsx","components/Task.tsx","utils/countCommentIds.ts","components/TaskStatusHeader.tsx","components/TaskList.tsx","components/TaskSection.tsx","components/TopLevelButton.tsx","components/SearchInput.tsx","pages/TasksPage.tsx","hooks/useDebounce.tsx"],"sourcesContent":["import \"@/styles/container.scss\";\r\n\r\nimport React, { ReactNode } from \"react\";\r\n\r\nconst Container = ({ children }: { children: ReactNode | ReactNode[] }) => {\r\n  return <div className=\"container\">{children}</div>;\r\n};\r\n\r\nexport default Container;\r\n","import { ChangeEvent, ChangeEventHandler, useState } from \"react\";\r\n\r\nconst useHandleFields = <T extends {}>(initialState: T): [T, ChangeEventHandler] => {\r\n  const [fields, setValues] = useState(initialState);\r\n\r\n  return [\r\n    fields,\r\n    (event: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\r\n      setValues({\r\n        ...fields,\r\n        [event.target.name]: event.target.value,\r\n      });\r\n      return;\r\n    },\r\n  ];\r\n};\r\n\r\nexport default useHandleFields\r\n","export const checkInputsLength = <T extends {}>(object: T): boolean => {\r\n  const values = Object.values(object);\r\n\r\n  for (const value of values) {\r\n    if (typeof value === \"string\" && value.length === 0) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  return true;\r\n};","import \"@/styles/add-task-form.scss\";\r\n\r\nimport React, { FormEvent } from \"react\";\r\n\r\nimport { Dispatch } from \"redux\";\r\nimport { ITask } from \"../types/ITask\";\r\nimport { addNewTask } from \"../core/actionCreators/tasksActionCreators\";\r\nimport { checkInputsLength } from \"../utils/checkInputsLength\";\r\nimport { connect } from \"react-redux\";\r\nimport useHandleFields from \"../hooks/useHandleFields\";\r\n\r\ninterface StateProps {\r\n  id: string;\r\n}\r\n\r\ninterface DispatchProps {\r\n  addTask(task: TaskForm): void;\r\n}\r\n\r\ntype TaskForm = Pick<\r\n  ITask,\r\n  \"title\" | \"project_id\" | \"description\" | \"start_date\"\r\n>;\r\n\r\ntype Props = StateProps & DispatchProps;\r\n\r\nconst AddTaskForm: React.FC<Props> = ({ id, addTask }) => {\r\n  const date = new Date(Date.now())\r\n\r\n  const [fields, handleFieldChange] = useHandleFields<TaskForm>({\r\n    title: \"\",\r\n    description: \"\",\r\n    project_id: id,\r\n    start_date: date,\r\n  });\r\n\r\n  const handleSubmit = (e: FormEvent) => {\r\n    e.preventDefault();\r\n    if (!fields) return;\r\n    \r\n    addTask(fields)\r\n  };\r\n\r\n  return (\r\n    <form className=\"add-task-form\" action=\"submit\" onSubmit={handleSubmit}>\r\n      <div className=\"add-input\">\r\n        <label htmlFor=\"title\">Name</label>\r\n        <input\r\n          name=\"title\"\r\n          type=\"text\"\r\n          value={fields.title}\r\n          onChange={handleFieldChange}\r\n        />\r\n      </div>\r\n\r\n      <div className=\"add-input\">\r\n        <label htmlFor=\"description\">Description</label>\r\n        <input\r\n          name=\"description\"\r\n          type=\"text\"\r\n          value={fields.description}\r\n          onChange={handleFieldChange}\r\n        />\r\n      </div>\r\n\r\n      <button\r\n        disabled={!checkInputsLength(fields)}\r\n        className=\"add-btn\"\r\n        type=\"submit\"\r\n      >\r\n        Создать\r\n      </button>\r\n    </form>\r\n  );\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\r\n  addTask: (task: TaskForm) => dispatch(addNewTask(task)),\r\n});\r\n\r\nexport default connect(null, mapDispatchToProps)(AddTaskForm);\r\n","import {\r\n  CommentPayload,\r\n  DeleteSubTaskPayload,\r\n  ReplyToCommentPayload,\r\n  SubTaskPayload,\r\n  TaskPayload,\r\n  TasksTypes,\r\n  UpdateSubTaskPayload,\r\n  UpdateTaskInfoPayload,\r\n  UpdateTaskStatusPayload,\r\n} from \"../actionTypes/tasksActionTypes\";\r\n\r\nexport const addNewTask = (payload: TaskPayload) => ({\r\n  type: TasksTypes.ADD_NEW_TASK,\r\n  payload,\r\n});\r\n\r\nexport const deleteCurrentTask = (payload: string) => ({\r\n  type: TasksTypes.DELETE_TASK,\r\n  payload,\r\n});\r\n\r\nexport const deleteCurrentSubTask = (payload: DeleteSubTaskPayload) => ({\r\n  type: TasksTypes.DELETE_SUBTASK,\r\n  payload,\r\n});\r\n\r\nexport const updateTaskStatus = (payload: UpdateTaskStatusPayload) => ({\r\n  type: TasksTypes.UPDATE_TASK_STATUS,\r\n  payload,\r\n});\r\n\r\nexport const updateTaskInfo = (payload: UpdateTaskInfoPayload) => ({\r\n  type: TasksTypes.UPDATE_TASK_INFO,\r\n  payload,\r\n});\r\n\r\nexport const updateSubTaskStatus = (payload: UpdateSubTaskPayload) => ({\r\n  type: TasksTypes.UPDATE_SUBTASK_STATUS,\r\n  payload,\r\n});\r\n\r\nexport const addNewComment = (payload: CommentPayload) => ({\r\n  type: TasksTypes.ADD_NEW_COMMENT,\r\n  payload,\r\n});\r\n\r\nexport const replyToComment = (payload: ReplyToCommentPayload) => ({\r\n  type: TasksTypes.REPLY_TO_COMMENT,\r\n  payload,\r\n});\r\n\r\nexport const addNewSubTask = (payload: SubTaskPayload) => ({\r\n  type: TasksTypes.ADD_NEW_SUBTASK,\r\n  payload,\r\n});\r\n","export const convertDateToNormal = (date: string | undefined) => {\r\n  if(!date) return \"\"\r\n  return date.slice(0, 10).split(\".\").reverse().join(\"-\")\r\n}","export const users = [\r\n  \"nar\",\r\n  \"An\",\r\n  \"Alfr\",\r\n  \"Alvi\",\r\n  \"Ari\",\r\n  \"Arinbjorn\",\r\n  \"Arngeir\",\r\n  \"Arngrim\",\r\n  \"Arnfinn\",\r\n  \"Asgeirr\",\r\n  \"Askell\",\r\n  \"Asvald\",\r\n  \"Bard\",\r\n  \"Baror\",\r\n  \"Bersi\",\r\n  \"Borkr\",\r\n  \"Bjarni\",\r\n  \"Bjorn\",\r\n  \"Brand\",\r\n  \"Brandr\",\r\n  \"Cairn\",\r\n  \"Canute\",\r\n  \"Dar\",\r\n  \"Einarr\",\r\n  \"Eirik\",\r\n  \"Egill\",\r\n  \"Engli\",\r\n  \"Eyvindr\",\r\n  \"Erik\",\r\n  \"Eyvind\",\r\n  \"Finnr\",\r\n  \"Floki\",\r\n  \"Fromund\",\r\n  \"Geirmundr\",\r\n  \"Geirr\",\r\n  \"Geri\",\r\n  \"Gisli\",\r\n  \"Gizzur\",\r\n  \"Gjafvaldr\",\r\n  \"Glumr\",\r\n  \"Gorm\",\r\n  \"Grmir\",\r\n  \"Gunnarr\",\r\n  \"Guomundr\",\r\n  \"Hak\",\r\n  \"Halbjorn\",\r\n  \"Halfdan\",\r\n  \"Hallvard\",\r\n  \"Hamal\",\r\n  \"Hamundr\",\r\n  \"Harald\",\r\n  \"Harek\",\r\n  \"Hedinn\",\r\n  \"Helgi\",\r\n  \"Henrik\",\r\n  \"Herbjorn\",\r\n  \"Herjolfr\",\r\n  \"Hildir\",\r\n  \"Hogni\",\r\n  \"Hrani\",\r\n  \"Ivarr\",\r\n  \"Hrolf\",\r\n  \"Jimmy\",\r\n  \"Jon\",\r\n  \"Jorund\",\r\n  \"Kalf\",\r\n  \"Ketil\",\r\n  \"Kheldar\",\r\n  \"Klaengr\",\r\n  \"Knut\",\r\n  \"Kolbeinn\",\r\n  \"Kolli\",\r\n  \"Kollr\",\r\n  \"Lambi\",\r\n  \"Magnus\",\r\n  \"Moldof\",\r\n  \"Mursi\",\r\n  \"Njall\",\r\n  \"Oddr\",\r\n  \"Olaf\",\r\n  \"Orlyg\",\r\n  \"Ormr\",\r\n  \"Ornolf\",\r\n  \"Osvald\",\r\n  \"Ozurr\",\r\n  \"Poror\",\r\n  \"Prondir\",\r\n  \"Ragi\",\r\n  \"Ragnvald\",\r\n  \"Refr\",\r\n  \"Runolf\",\r\n  \"Saemund\",\r\n  \"Siegfried\",\r\n  \"Sigmundr\",\r\n  \"Sigurd\",\r\n  \"Sigvat\",\r\n  \"Skeggi\",\r\n  \"Skomlr\",\r\n  \"Slode\",\r\n  \"Snorri\",\r\n  \"Sokkolf\",\r\n  \"Solvi\",\r\n  \"Surt\",\r\n  \"Sven\",\r\n  \"Thangbrand\",\r\n  \"Thjodoft\",\r\n  \"Thorod\",\r\n  \"Thorgest\",\r\n  \"Thorvald\",\r\n  \"Thrain\",\r\n  \"Throst\",\r\n  \"Torfi\",\r\n  \"Torix\",\r\n  \"Tryfing\",\r\n  \"Ulf\",\r\n  \"Valgaror\",\r\n  \"Vali\",\r\n  \"Vifil\",\r\n  \"Vigfus\",\r\n  \"Vika\",\r\n  \"Waltheof\",\r\n];\r\n","import React, { FormEvent, useEffect, useState } from \"react\";\r\n\r\nimport { Dispatch } from \"redux\";\r\nimport { IComment } from \"../types/ITask\";\r\nimport { checkInputsLength } from \"../utils/checkInputsLength\";\r\nimport { connect } from \"react-redux\";\r\nimport { convertDateToNormal } from \"../utils/convertDateToNormal\";\r\nimport { replyToComment } from \"../core/actionCreators/tasksActionCreators\";\r\nimport useHandleFields from \"../hooks/useHandleFields\";\r\nimport { users } from \"../config/users\";\r\n\r\ninterface StateProps {\r\n  taskId: string;\r\n  comment: IComment;\r\n}\r\n\r\ninterface DispatchProps {\r\n  replyComment(comment: CommentForm): void;\r\n}\r\n\r\ntype CommentForm = {\r\n  taskId: string;\r\n  commentId: string;\r\n  text: string;\r\n  creation_date: string;\r\n};\r\n\r\ntype Props = StateProps & DispatchProps;\r\n\r\nconst Comment: React.FC<Props> = ({ taskId, comment, replyComment }) => {\r\n  const date = new Date(Date.now()).toLocaleString();\r\n\r\n  const nestedComments = (comment.children || []).map((comment) => {\r\n    return (\r\n      <Comment\r\n        key={comment.commentId}\r\n        replyComment={replyComment}\r\n        taskId={taskId}\r\n        comment={comment}\r\n      />\r\n    );\r\n  });\r\n\r\n  const [fields, handleFieldChange] = useHandleFields<CommentForm>({\r\n    taskId: taskId,\r\n    commentId: comment.commentId,\r\n    text: \"\",\r\n    creation_date: date,\r\n  });\r\n\r\n  const [isAnswer, setisAnswer] = useState<boolean>(false);\r\n\r\n  const handleClick = () => {\r\n    setisAnswer((prev) => !prev);\r\n  };\r\n\r\n  const handleSubmit = (e: FormEvent) => {\r\n    e.preventDefault();\r\n    replyComment(fields);\r\n    handleClick();\r\n  };\r\n\r\n  const [name, setName] = useState(\"\")\r\n\r\n  useEffect(() => {\r\n    const getRandom = (items: string[]) => {\r\n      setName(items[Math.floor(Math.random() * items.length)]);\r\n    }\r\n    getRandom(users)\r\n  }, [])\r\n\r\n  return (\r\n    <div style={{ padding: \"10px\", borderLeft: \"1px solid #4a4f50\" }}>\r\n      <div className=\"date comment-container\">\r\n        <p>{name}</p>\r\n        <p className=\"comment-text\">{comment.text}</p>\r\n        <div className=\"comment-extra\">\r\n          <p>{convertDateToNormal(comment.creation_date)}</p>\r\n          <button onClick={handleClick} className=\"answer\">\r\n            Reply\r\n          </button>\r\n        </div>\r\n        {isAnswer ? (\r\n          <div className=\"answer-form\">\r\n            <form action=\"submit\" onSubmit={handleSubmit}>\r\n              <input\r\n                name=\"text\"\r\n                className=\"answer-input\"\r\n                type=\"text\"\r\n                value={fields.text}\r\n                onChange={handleFieldChange}\r\n              />\r\n              <button\r\n                disabled={!checkInputsLength(fields)}\r\n                type=\"submit\"\r\n                className=\"add-btn answer-button\"\r\n              >\r\n                Reply\r\n              </button>\r\n            </form>\r\n          </div>\r\n        ) : null}\r\n      </div>\r\n      {nestedComments}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\r\n  replyComment: (comment: CommentForm) => dispatch(replyToComment(comment)),\r\n});\r\n\r\nexport default connect(null, mapDispatchToProps)(Comment);\r\n","import \"@/styles/comment.scss\";\r\n\r\nimport { IComment, ITask } from \"../types/ITask\";\r\nimport React, { FormEvent } from \"react\";\r\n\r\nimport Comment from \"./Comment\";\r\nimport { Dispatch } from \"redux\";\r\nimport { addNewComment } from \"../core/actionCreators/tasksActionCreators\";\r\nimport { connect } from \"react-redux\";\r\nimport useHandleFields from \"../hooks/useHandleFields\";\r\n\r\ninterface StateProps {\r\n  id: string;\r\n  comments: IComment[];\r\n}\r\n\r\ninterface DispatchProps {\r\n  addComment(comment: CommentForm): void;\r\n}\r\n\r\ntype CommentForm = Pick<ITask, \"id\"> & Omit<IComment, \"commentId\" | \"children\">;\r\n\r\ntype Props = StateProps & DispatchProps;\r\n\r\nconst CommentsContainer: React.FC<Props> = ({ id, comments, addComment }) => {\r\n  const date = new Date(Date.now()).toLocaleString();\r\n\r\n  const [fields, handleFieldChange] = useHandleFields<CommentForm>({\r\n    id: id,\r\n    text: \"\",\r\n    creation_date: date,\r\n  });\r\n\r\n  const handleSubmit = (e: FormEvent) => {\r\n    e.preventDefault();\r\n    if (!fields) return;\r\n\r\n    addComment(fields);\r\n\r\n    fields.creation_date = date;\r\n  };\r\n\r\n  return (\r\n    <div className=\"form-comments-container\">\r\n      <form\r\n        className=\"add-comments-form\"\r\n        action=\"submit\"\r\n        onSubmit={handleSubmit}\r\n      >\r\n        <input\r\n          name=\"text\"\r\n          placeholder=\"Type comment\"\r\n          type=\"text\"\r\n          value={fields.text}\r\n          onChange={handleFieldChange}\r\n        />\r\n        <button\r\n          className=\"add-btn\"\r\n          disabled={!fields.text.length}\r\n          type=\"submit\"\r\n        >\r\n          Send comment\r\n        </button>\r\n      </form>\r\n      <div className=\"comments-container\">\r\n        {comments.length > 0 &&\r\n          comments.map((comment) => (\r\n            <Comment key={comment.commentId} taskId={id} comment={comment} />\r\n          ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\r\n  addComment: (comment: CommentForm) => dispatch(addNewComment(comment)),\r\n});\r\n\r\nexport default connect(null, mapDispatchToProps)(CommentsContainer);\r\n","import { ISubTask, SubTaskStatus } from \"../types/ITask\";\r\nimport { MdDelete, MdOutlineError } from \"react-icons/md\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport {\r\n  deleteCurrentSubTask,\r\n  updateSubTaskStatus,\r\n} from \"../core/actionCreators/tasksActionCreators\";\r\n\r\nimport { AiFillCheckCircle } from \"react-icons/ai\";\r\nimport { Dispatch } from \"redux\";\r\nimport { RxCrossCircled } from \"react-icons/rx\";\r\nimport { connect } from \"react-redux\";\r\n\r\ninterface StateProps {\r\n  taskId: string;\r\n  subTask: ISubTask;\r\n}\r\n\r\ninterface DispatchProps {\r\n  updateStatus(subTask: SubTaskUpdatePayload): void;\r\n  deleteSubTask(subTask: SubTaskDeletePayload): void;\r\n}\r\n\r\ntype Props = StateProps & DispatchProps;\r\n\r\ntype SubTaskUpdatePayload = {\r\n  taskId: string;\r\n  subTaskId: string;\r\n  status: SubTaskStatus;\r\n};\r\n\r\ntype SubTaskDeletePayload = {\r\n  taskId: string;\r\n  subTaskId: string;\r\n};\r\n\r\nconst SubTask: React.FC<Props> = ({\r\n  taskId,\r\n  subTask,\r\n  updateStatus,\r\n  deleteSubTask,\r\n}) => {\r\n  const checkStatus = (status: SubTaskStatus) =>\r\n    status === \"incompleted\" ? \"completed\" : \"incompleted\";\r\n\r\n  const [updateFields, setUpdateFields] = useState<SubTaskUpdatePayload>({\r\n    taskId: taskId,\r\n    subTaskId: subTask.subTaskId,\r\n    status: checkStatus(subTask.status),\r\n  });\r\n\r\n  const [deleteFields] = useState<SubTaskDeletePayload>({\r\n    taskId: taskId,\r\n    subTaskId: subTask.subTaskId,\r\n  });\r\n\r\n  const handleIsDone = () => {\r\n    updateStatus(updateFields);\r\n  };\r\n\r\n  const handleDelete = () => {\r\n    deleteSubTask(deleteFields);\r\n  };\r\n\r\n  useEffect(() => {\r\n    setUpdateFields({\r\n      ...updateFields,\r\n      status: checkStatus(subTask.status),\r\n    });\r\n  }, [subTask.status]);\r\n\r\n  return (\r\n    <div className=\"subtask\">\r\n      <div className=\"info\">\r\n        <div className=\"status\">\r\n          {subTask.status === \"completed\" ? (\r\n            <i style={{ color: \"#1D795F\" }}>\r\n              <AiFillCheckCircle />\r\n            </i>\r\n          ) : (\r\n            <i style={{ color: \"#D64A4A\" }}>\r\n              <MdOutlineError />\r\n            </i>\r\n          )}\r\n        </div>\r\n        <div className=\"text\">\r\n          <p>{subTask.text}</p>\r\n        </div>\r\n      </div>\r\n      <div className=\"actions\">\r\n        <button onClick={handleIsDone} className=\"action-button\">\r\n          {subTask.status === \"incompleted\" ? (\r\n            <i style={{ color: \"#1D795F\" }}>\r\n              <AiFillCheckCircle />\r\n            </i>\r\n          ) : (\r\n            <i style={{ color: \"#D64A4A\" }}>\r\n              <RxCrossCircled />\r\n            </i>\r\n          )}\r\n        </button>\r\n        <button onClick={handleDelete} className=\"action-button\">\r\n          <i style={{ color: \"#D64A4A\" }}>\r\n            <MdDelete />\r\n          </i>\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\r\n  updateStatus: (subTask: SubTaskUpdatePayload) =>\r\n    dispatch(updateSubTaskStatus(subTask)),\r\n  deleteSubTask: (subTask: SubTaskDeletePayload) =>\r\n    dispatch(deleteCurrentSubTask(subTask)),\r\n});\r\n\r\nexport default connect(null, mapDispatchToProps)(SubTask);\r\n","import \"@/styles/subtask.scss\";\r\n\r\nimport { ISubTask, ITask } from \"../types/ITask\";\r\nimport React, { FormEvent } from \"react\";\r\n\r\nimport { Dispatch } from \"redux\";\r\nimport SubTask from \"./SubTask\";\r\nimport { addNewSubTask } from \"../core/actionCreators/tasksActionCreators\";\r\nimport { connect } from \"react-redux\";\r\nimport useHandleFields from \"../hooks/useHandleFields\";\r\n\r\ninterface StateProps {\r\n  id: string;\r\n  subTasks: ISubTask[];\r\n}\r\n\r\ninterface DispatchProps {\r\n  addSubTask(subTask: SubTaskForm): void;\r\n}\r\n\r\ntype SubTaskForm = Pick<ITask, \"id\"> & Pick<ISubTask, \"text\">;\r\n\r\ntype Props = StateProps & DispatchProps;\r\n\r\nconst SubTasksContainer: React.FC<Props> = ({ id, subTasks, addSubTask }) => {\r\n  const [fields, handleFieldChange] = useHandleFields<SubTaskForm>({\r\n    id: id,\r\n    text: \"\",\r\n  });\r\n\r\n  const handleSubmit = (e: FormEvent) => {\r\n    e.preventDefault();\r\n    if (!fields) return;\r\n\r\n    addSubTask(fields);\r\n  };\r\n\r\n  return (\r\n    <div className=\"form-subtasks-container\">\r\n      <form\r\n        className=\"add-subtasks-form\"\r\n        action=\"submit\"\r\n        onSubmit={handleSubmit}\r\n      >\r\n        <input\r\n          name=\"text\"\r\n          placeholder=\"Type subtask\"\r\n          type=\"text\"\r\n          value={fields.text}\r\n          onChange={handleFieldChange}\r\n        />\r\n        <button\r\n          className=\"add-btn\"\r\n          disabled={!fields.text.length}\r\n          type=\"submit\"\r\n        >\r\n          Create subtask\r\n        </button>\r\n      </form>\r\n      <div className=\"subtasks-container\">\r\n        {subTasks.length > 0 &&\r\n          subTasks.map((subTask) => <SubTask key={subTask.subTaskId} taskId={id} subTask={subTask} />)}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\r\n  addSubTask: (subTask: SubTaskForm) => dispatch(addNewSubTask(subTask)),\r\n});\r\n\r\nexport default connect(null, mapDispatchToProps)(SubTasksContainer);\r\n","import { ITask, Priority } from \"../types/ITask\";\r\nimport React, { FormEvent } from \"react\";\r\nimport {\r\n  deleteCurrentTask,\r\n  updateTaskInfo,\r\n} from \"../core/actionCreators/tasksActionCreators\";\r\n\r\nimport { Dispatch } from \"redux\";\r\nimport { checkInputsLength } from \"../utils/checkInputsLength\";\r\nimport { connect } from \"react-redux\";\r\nimport { convertDateToNormal } from \"../utils/convertDateToNormal\";\r\nimport useHandleFields from \"../hooks/useHandleFields\";\r\n\r\ninterface StateProps {\r\n  task: ITask;\r\n}\r\n\r\ninterface DispatchProps {\r\n  deleteTask(id: string): void;\r\n  updateTask(updatedTask: InfoForm): void;\r\n}\r\n\r\ntype Props = StateProps & DispatchProps;\r\n\r\ntype InfoForm = Pick<ITask, \"id\" | \"title\" | \"description\" | \"priority\">;\r\n\r\nconst TaskInfoForm: React.FC<Props> = ({ task, deleteTask, updateTask }) => {\r\n  const [fields, handleFieldChange] = useHandleFields<InfoForm>({\r\n    id: task.id,\r\n    title: task.title,\r\n    description: task.description,\r\n    priority: task.priority,\r\n  });\r\n\r\n  const handleSubmit = (e: FormEvent) => {\r\n    e.preventDefault();\r\n    if (!fields) return;\r\n\r\n    updateTask(fields);\r\n  };\r\n\r\n  const handleDelete = (id: string) => {\r\n    deleteTask(id);\r\n  };\r\n\r\n  let color: string = \"\";\r\n\r\n  switch (task.status) {\r\n    case \"queue\":\r\n      color = \"#CD5C5C\";\r\n      break;\r\n    case \"development\":\r\n      color = \"#DE9A43\";\r\n      break;\r\n    case \"done\":\r\n      color = \"#1D795F\";\r\n      break;\r\n    default:\r\n      color = \"\";\r\n      break;\r\n  }\r\n\r\n  const priorities: Priority[] = [\"low\", \"middle\", \"high\"];\r\n\r\n  const now = new Date(Date.now())\r\n  const created = new Date(task.start_date)\r\n\r\n  const result = now.getTime() - created.getTime()\r\n\r\n  const workingTime = Math.floor(result / (1000 * 3600 * 24))\r\n\r\n  return (\r\n    <form action=\"submit\" onSubmit={handleSubmit}>\r\n      <div className=\"field\">\r\n        <label htmlFor=\"title\">Title</label>\r\n        <input\r\n          type=\"text\"\r\n          name=\"title\"\r\n          value={fields.title}\r\n          onChange={handleFieldChange}\r\n        />\r\n      </div>\r\n\r\n      <div className=\"field\">\r\n        <label htmlFor=\"description\">Description</label>\r\n        <textarea\r\n          name=\"description\"\r\n          value={fields.description}\r\n          onChange={handleFieldChange}\r\n        />\r\n      </div>\r\n\r\n      <div className=\"field\">\r\n        <label htmlFor=\"priority\">Priority</label>\r\n        <select name=\"priority\" onChange={handleFieldChange}>\r\n          <>\r\n            <option value={fields.priority}>{fields.priority}</option>\r\n            {priorities.map((priority, index) => (\r\n              <option key={index} value={priority}>\r\n                {priority}\r\n              </option>\r\n            ))}\r\n          </>\r\n        </select>\r\n      </div>\r\n\r\n      <div className=\"field\">\r\n        <span>Status</span>\r\n        <div className=\"status\" style={{ backgroundColor: color }}>\r\n          {task.status.toUpperCase()}\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"field\">\r\n        <span>Working time</span>\r\n        <div className=\"working-time\">{workingTime} days</div>\r\n      </div>\r\n\r\n      <div className=\"date\">\r\n        <p>Created: {convertDateToNormal(task.start_date.toString())}</p>\r\n        <p>Finished: {convertDateToNormal(task.end_date)}</p>\r\n      </div>\r\n\r\n      <div className=\"button-container\">\r\n        <button\r\n          disabled={!checkInputsLength(fields)}\r\n          className=\"button edit\"\r\n          type=\"submit\"\r\n        >\r\n          Edit\r\n        </button>\r\n        <button\r\n          className=\"button delete\"\r\n          type=\"button\"\r\n          onClick={() => handleDelete(task.id)}\r\n        >\r\n          Delete\r\n        </button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\r\n  updateTask: (updatedTask: InfoForm) => dispatch(updateTaskInfo(updatedTask)),\r\n  deleteTask: (id: string) => dispatch(deleteCurrentTask(id)),\r\n});\r\n\r\nexport default connect(null, mapDispatchToProps)(TaskInfoForm);\r\n","import \"@/styles/task-project-form.scss\";\r\n\r\nimport CommentsContainer from \"./CommentsContainer\";\r\nimport { type ITask } from \"../types/ITask\";\r\nimport React from \"react\";\r\nimport SubTasksContainer from \"./SubTasksContainer\";\r\nimport TaskInfoForm from \"./TaskInfoForm\";\r\n\r\ninterface Props {\r\n  task: ITask;\r\n}\r\n\r\nconst EditTaskForm: React.FC<Props> = ({ task }) => {\r\n  return (\r\n    <div className=\"form\">\r\n      <TaskInfoForm task={task} />\r\n      <SubTasksContainer id={task.id} subTasks={task.sub_tasks}/>\r\n      <CommentsContainer id={task.id} comments={task.comments}/>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EditTaskForm;\r\n","import \"@/styles/drag.scss\";\r\n\r\nimport React from 'react';\r\n\r\nconst Drag = () => {\r\n  return (\r\n    <div className='drag-container'>\r\n      <span className='drag-dot'></span>\r\n      <span className='drag-dot'></span>\r\n      <span className='drag-dot'></span>\r\n      <span className='drag-dot'></span>\r\n      <span className='drag-dot'></span>\r\n      <span className='drag-dot'></span>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Drag","import \"@/styles/modal.scss\";\r\n\r\nimport React, { MouseEvent, ReactNode, SetStateAction } from \"react\";\r\n\r\ninterface StateProps {\r\n  children: ReactNode;\r\n  close(show: SetStateAction<boolean>): void\r\n}\r\n\r\ntype Props = StateProps\r\n\r\nconst Modal: React.FC<Props> = ({ children, close }) => {\r\n  const handleModalClose = (e: MouseEvent<HTMLSpanElement>) => {\r\n    close(false);\r\n  };\r\n\r\n  return (\r\n    <div className=\"modal-overlay\">\r\n      <div className=\"modal\">\r\n        <span className=\"modal-close\" onClick={handleModalClose}></span>\r\n        {children}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Modal;\r\n","import React, { useState } from \"react\";\r\n\r\nimport { type ITask } from \"../types/ITask\";\r\nimport EditTaskForm from \"./EditTaskForm\";\r\nimport { AiOutlineComment } from \"react-icons/ai\";\r\nimport { BsListTask } from \"react-icons/bs\";\r\n\r\nimport \"@/styles/custom-div.scss\";\r\nimport Drag from \"./Drag\";\r\nimport Modal from \"./Modal\";\r\nimport { useDrag } from \"react-dnd\";\r\nimport { countCommentIds } from \"../utils/countCommentIds\";\r\nimport { convertDateToNormal } from '../utils/convertDateToNormal';\r\n\r\ninterface StateProps {\r\n  task: ITask;\r\n}\r\n\r\ntype Props = StateProps;\r\n\r\nconst Task: React.FC<Props> = ({ task }) => {\r\n  const [{ isDragging }, drag] = useDrag(() => ({\r\n    type: \"task\",\r\n    item: { id: task.id },\r\n    collect: (monitor) => ({\r\n      isDragging: !!monitor.isDragging(),\r\n    }),\r\n  }));\r\n\r\n  const commentsAmount = countCommentIds(task.comments);\r\n\r\n  const [show, setShow] = useState(false);\r\n\r\n  const handleOpenModal = () => {\r\n    setShow(true);\r\n  };\r\n\r\n  let color: string = \"\";\r\n\r\n  switch (task.priority) {\r\n    case \"high\":\r\n      color = \"#cd5c5c\";\r\n      break;\r\n    case \"middle\":\r\n      color = \"#de9a43\";\r\n      break;\r\n    case \"low\":\r\n      color = \"#1d795f\";\r\n      break;\r\n    default:\r\n      color = \"\";\r\n      break;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <button\r\n        ref={drag}\r\n        style={{\r\n          opacity: isDragging ? \"0.25\" : \"1\",\r\n          background: `linear-gradient(145deg, #353839 70%, ${color} 150%)`,\r\n        }}\r\n        className=\"custom-div\"\r\n        onClick={handleOpenModal}\r\n      >\r\n        <div className=\"task-heading\">\r\n          <h1>{task.title}</h1>\r\n          <Drag />\r\n        </div>\r\n        <p className=\"description\">{task.description}</p>\r\n        <div className=\"comments-subtasks\">\r\n          <div className=\"comments\">\r\n            <i>\r\n              <AiOutlineComment />\r\n            </i>\r\n            <span>{Object.keys(commentsAmount).length}</span>\r\n          </div>\r\n          <div className=\"subtasks\">\r\n            <i><BsListTask /></i>\r\n            <span>{task.sub_tasks.length}</span>\r\n          </div>\r\n        </div>\r\n        <div className=\"date\">\r\n          <p>Created: {convertDateToNormal(task.start_date.toString())}</p>\r\n          <p>Finished: {convertDateToNormal(task.end_date)}</p>\r\n        </div>\r\n      </button>\r\n      {show && (\r\n        <Modal close={setShow}>\r\n          <EditTaskForm task={task} />\r\n        </Modal>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Task;\r\n","import { IComment } from \"../types/ITask\";\r\n\r\nexport const countCommentIds = (comments: IComment[]): Record<string, number> => {\r\n  const countMap: Record<string, number> = {};\r\n\r\n  const countComments = (comments: IComment[]): void => {\r\n    for (const comment of comments) {\r\n      if (comment.commentId) {\r\n        countMap[comment.commentId] = (countMap[comment.commentId] || 0) + 1;\r\n      }\r\n      if (comment.children.length > 0) {\r\n        countComments(comment.children);\r\n      }\r\n    }\r\n  };\r\n\r\n  countComments(comments);\r\n\r\n  return countMap;\r\n};","import React from \"react\";\r\n\r\nconst TaskStatusHeader = ({ status }: { status: string }) => {\r\n  return (\r\n    <div className=\"task-status-header\">\r\n      <h1>{status}</h1>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TaskStatusHeader;\r\n","import { ITask, Status } from \"../types/ITask\";\r\n\r\nimport { Dispatch } from \"redux\";\r\nimport React from \"react\";\r\nimport Task from \"./Task\";\r\nimport TaskStatusHeader from \"./TaskStatusHeader\";\r\nimport { connect } from \"react-redux\";\r\nimport { updateTaskStatus } from \"../core/actionCreators/tasksActionCreators\";\r\nimport { useDrop } from \"react-dnd\";\r\n\r\ninterface StateProps {\r\n  queue: ITask[];\r\n  development: ITask[];\r\n  done: ITask[];\r\n\r\n  status: Status;\r\n}\r\n\r\ninterface DispatchProps {\r\n  updateStatus(id: string, status: Status): void;\r\n}\r\n\r\ntype Props = StateProps & DispatchProps;\r\n\r\nconst TaskList: React.FC<Props> = ({ ...props }) => {\r\n  const [{ isOver }, drop] = useDrop(() => ({\r\n    accept: \"task\",\r\n    drop: (item: ITask) => addItemToSection(item.id),\r\n    collect: (monitor) => ({\r\n      isOver: !!monitor.isOver(),\r\n    }),\r\n  }));\r\n\r\n  const addItemToSection = (id: string) => {\r\n    props.updateStatus(id, props.status);\r\n  };\r\n\r\n  let tasksToMap: ITask[] = [];\r\n\r\n  switch (props.status) {\r\n    case \"queue\":\r\n      tasksToMap = props.queue;\r\n      break;\r\n    case \"development\":\r\n      tasksToMap = props.development;\r\n      break;\r\n    case \"done\":\r\n      tasksToMap = props.done;\r\n      break;\r\n    default:\r\n      tasksToMap = [];\r\n      break;\r\n  }\r\n\r\n  return (\r\n    <div\r\n      ref={drop}\r\n      style={{ background: isOver ? \"#4d5254\" : \"\" }}\r\n      className=\"task-list-container\"\r\n    >\r\n      <TaskStatusHeader status={props.status} />\r\n      {tasksToMap.length > 0 &&\r\n        tasksToMap.map((task) => <Task key={task.id} task={task} />)}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\r\n  updateStatus: (id: string, status: Status) =>\r\n    dispatch(updateTaskStatus({ id, status })),\r\n});\r\n\r\nexport default connect(null, mapDispatchToProps)(TaskList);\r\n","import \"@/styles/task-section.scss\";\r\n\r\nimport { ITask, Status } from \"../types/ITask\";\r\nimport React, { useMemo } from \"react\";\r\n\r\nimport TaskList from \"./TaskList\";\r\n\r\ninterface Props {\r\n  tasks: ITask[];\r\n};\r\n\r\nconst TaskSection: React.FC<Props> = ({ tasks }) => {\r\n  const filteredByQueueStatus = useMemo(\r\n    () => tasks.filter((task) => task.status === \"queue\"),\r\n    [tasks]\r\n  );\r\n  const filteredByDevelopmentStatus = useMemo(\r\n    () => tasks.filter((task) => task.status === \"development\"),\r\n    [tasks]\r\n  );\r\n  const filteredByDoneStatus = useMemo(\r\n    () => tasks.filter((task) => task.status === \"done\"),\r\n    [tasks]\r\n  );\r\n\r\n  const statuses: Status[] = [\"queue\", \"development\", \"done\"];\r\n\r\n  return (\r\n    <div className=\"task-section\">\r\n      {statuses.map((status, index) => (\r\n        <TaskList\r\n          key={index}\r\n          status={status}\r\n          queue={filteredByQueueStatus}\r\n          development={filteredByDevelopmentStatus}\r\n          done={filteredByDoneStatus}\r\n        />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TaskSection;\r\n","import React, { ReactNode } from \"react\";\r\n\r\ninterface Props\r\n  extends React.DetailedHTMLProps<\r\n      React.ButtonHTMLAttributes<HTMLButtonElement>,\r\n      HTMLButtonElement\r\n    >,\r\n    React.AriaAttributes {\r\n  children: string | ReactNode;\r\n}\r\n\r\nconst TopLevelButton: React.FC<Props> = ({ children, ...attributes }) => {\r\n  return (\r\n    <button type=\"button\" {...attributes}>\r\n      {children}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default TopLevelButton;\r\n","import React from \"react\";\r\n\r\ninterface Props\r\n  extends React.DetailedHTMLProps<\r\n      React.InputHTMLAttributes<HTMLInputElement>,\r\n      HTMLInputElement\r\n    >,\r\n    React.AriaAttributes {}\r\n\r\nconst SearchInput: React.FC<Props> = ({ ...attributes }) => {\r\n  return <input type=\"text\" {...attributes} />;\r\n};\r\n\r\nexport default SearchInput;\r\n","import \"@/styles/top-level-btns-container.scss\";\r\n\r\nimport React, { ChangeEvent, useEffect, useState } from \"react\";\r\n\r\nimport Container from \"../components/Container\";\r\nimport { type ITask } from \"../types/ITask\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nimport { connect } from \"react-redux\";\r\nimport { AppState } from \"../core/reducers/rootReducer\";\r\nimport AddTaskForm from \"../components/AddTaskForm\";\r\nimport TaskSection from \"../components/TaskSection\";\r\nimport Modal from \"../components/Modal\";\r\nimport TopLevelButton from \"../components/TopLevelButton\";\r\nimport SearchInput from \"../components/SearchInput\";\r\nimport { useDebounce } from \"../hooks/useDebounce\";\r\n\r\ninterface StateProps {\r\n  tasks: ITask[];\r\n  id: string;\r\n}\r\n\r\ntype Props = StateProps;\r\n\r\nconst TasksPage: React.FC<Props> = ({ tasks, id }) => {\r\n  const [show, setShow] = useState<boolean>(false);\r\n  const [projectTasks, setProjectTasks] = useState<ITask[]>([]);\r\n\r\n  const [filter, setFilter] = useState(\"\");\r\n\r\n  const searchTasks = (filter: string) => {\r\n    return filter\r\n      ? projectTasks.filter((task) => task.title.includes(filter))\r\n      : projectTasks;\r\n  };\r\n\r\n  const searchQuery = useDebounce(filter, 300)\r\n  const searchedTasks = searchTasks(searchQuery);\r\n\r\n  const searchHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n    setFilter(e.target.value);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!tasks.length) return;\r\n\r\n    const filterProjectTasks = () => {\r\n      const filteredByProjectId = tasks.filter((task) => task.project_id === id);\r\n      setProjectTasks(filteredByProjectId);\r\n    };\r\n    filterProjectTasks();\r\n  }, [tasks, id]);\r\n\r\n  return (\r\n    <>\r\n      <div className=\"top-level-btns-container\">\r\n        <TopLevelButton\r\n          className=\"call-modal-button top-level-button\"\r\n          onClick={() => setShow(true)}\r\n        >\r\n          <span>+</span>\r\n        </TopLevelButton>\r\n        <TopLevelButton className=\"back-to-projects top-level-button\">\r\n          <NavLink to=\"/\">\r\n            <span>&#10232;</span>\r\n          </NavLink>\r\n        </TopLevelButton>\r\n      </div>\r\n      <Container>\r\n        <SearchInput\r\n          placeholder=\"Enter task's name\"\r\n          onChange={(e) => searchHandler(e)}\r\n        />\r\n        {tasks.length ? <TaskSection tasks={searchedTasks} /> : null}\r\n      </Container>\r\n      {show && (\r\n        <Modal close={setShow}>\r\n          <AddTaskForm id={id} />\r\n        </Modal>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state: AppState) => ({\r\n  tasks: state.tasks.data,\r\n});\r\n\r\nexport default connect(mapStateToProps, null)(TasksPage);\r\n","import { useEffect, useState } from 'react'\r\n\r\nexport const useDebounce = (value: string, milliSeconds: number) => {\r\n const [debouncedValue, setDebouncedValue] = useState(value);\r\n\r\n useEffect(() => {\r\n   const handler = setTimeout(() => {\r\n     setDebouncedValue(value);\r\n   }, milliSeconds);\r\n\r\n   return () => {\r\n     clearTimeout(handler);\r\n   };\r\n }, [value, milliSeconds]);\r\n\r\n return debouncedValue;\r\n};"],"names":["_ref","children","_jsx","className","initialState","_useState","useState","_useState2","_slicedToArray","fields","setValues","event","_objectSpread","_defineProperty","target","name","value","checkInputsLength","object","_i","_values","Object","values","length","connect","dispatch","addTask","task","payload","type","TasksTypes","ADD_NEW_TASK","id","date","Date","now","_useHandleFields","useHandleFields","title","description","project_id","start_date","_useHandleFields2","handleFieldChange","_jsxs","action","onSubmit","e","preventDefault","htmlFor","onChange","disabled","convertDateToNormal","slice","split","reverse","join","users","replyComment","comment","REPLY_TO_COMMENT","Comment","taskId","toLocaleString","nestedComments","map","commentId","text","creation_date","isAnswer","setisAnswer","handleClick","prev","_useState3","_useState4","setName","useEffect","items","Math","floor","random","style","padding","borderLeft","onClick","addComment","ADD_NEW_COMMENT","comments","placeholder","updateStatus","subTask","UPDATE_SUBTASK_STATUS","deleteSubTask","DELETE_SUBTASK","checkStatus","status","subTaskId","updateFields","setUpdateFields","deleteFields","color","AiFillCheckCircle","MdOutlineError","RxCrossCircled","MdDelete","addSubTask","ADD_NEW_SUBTASK","subTasks","SubTask","updateTask","updatedTask","UPDATE_TASK_INFO","deleteTask","DELETE_TASK","priority","created","result","getTime","workingTime","_Fragment","index","backgroundColor","toUpperCase","toString","end_date","TaskInfoForm","SubTasksContainer","sub_tasks","CommentsContainer","close","_useDrag","useDrag","item","collect","monitor","isDragging","_useDrag2","drag","commentsAmount","countMap","countComments","_step","_iterator","_createForOfIteratorHelper","s","n","done","err","f","countCommentIds","show","setShow","ref","opacity","background","concat","Drag","AiOutlineComment","keys","BsListTask","Modal","EditTaskForm","UPDATE_TASK_STATUS","props","assign","_objectDestructuringEmpty","_useDrop","useDrop","accept","drop","addItemToSection","isOver","_useDrop2","tasksToMap","queue","development","TaskStatusHeader","Task","tasks","filteredByQueueStatus","useMemo","filter","filteredByDevelopmentStatus","filteredByDoneStatus","TaskList","attributes","_objectWithoutProperties","_excluded","state","data","projectTasks","setProjectTasks","_useState5","_useState6","setFilter","searchQuery","milliSeconds","debouncedValue","setDebouncedValue","handler","setTimeout","clearTimeout","useDebounce","searchedTasks","includes","searchTasks","filteredByProjectId","filterProjectTasks","TopLevelButton","NavLink","to","Container","SearchInput","searchHandler","TaskSection","AddTaskForm"],"sourceRoot":""}