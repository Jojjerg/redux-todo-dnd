{"version":3,"file":"static/js/726.686caa3f.chunk.js","mappings":"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","sources":["components/Container.tsx","hooks/useHandleFields.tsx","components/Project.tsx","core/actionCreators/projectsActionCreators.ts","components/AddProjectForm.tsx","pages/ProjectsPage.tsx"],"sourcesContent":["import \"@/styles/container.scss\";\r\n\r\nimport React, { ReactNode } from \"react\";\r\n\r\nconst Container = ({ children }: { children: ReactNode | ReactNode[] }) => {\r\n  return <div className=\"container\">{children}</div>;\r\n};\r\n\r\nexport default Container;\r\n","import { ChangeEvent, ChangeEventHandler, useState } from \"react\";\r\n\r\nconst useHandleFields = <T extends {}>(initialState: T): [T, ChangeEventHandler] => {\r\n  const [fields, setValues] = useState(initialState);\r\n\r\n  return [\r\n    fields,\r\n    (event: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\r\n      setValues({\r\n        ...fields,\r\n        [event.target.name]: event.target.value,\r\n      });\r\n      return;\r\n    },\r\n  ];\r\n};\r\n\r\nexport default useHandleFields\r\n","import \"@/styles/custom-div.scss\";\r\n\r\nimport { Status, type IProject } from \"../types/IProject\";\r\nimport React, { MouseEvent } from \"react\";\r\nimport { Dispatch } from \"redux\";\r\nimport { updateProjectStatus } from \"../core/actionCreators/projectsActionCreators\";\r\nimport { connect } from \"react-redux\";\r\n\r\ninterface DispatchProps {\r\n  updateStatus(id: string, status: Status): void;\r\n};\r\n\r\ntype StateProps = IProject;\r\n\r\ntype Props = StateProps & DispatchProps;\r\n\r\nconst Project: React.FC<Props> = ({ id, title, status, updateStatus }) => {\r\n  const checkStatus = (status: Status) =>\r\n    status === \"incompleted\" ? \"completed\" : \"incompleted\";\r\n\r\n  const handleIsDone = (e: MouseEvent<HTMLButtonElement>) => {\r\n    e.preventDefault();\r\n\r\n    const newStatus = checkStatus(status);\r\n    updateStatus(id, newStatus);\r\n  };\r\n\r\n  let action: string = \"\";\r\n\r\n  switch (status) {\r\n    case \"incompleted\":\r\n      action = \"Complete\";\r\n      break;\r\n    case \"completed\":\r\n      action = \"Cancel\";\r\n      break;\r\n    default:\r\n      action = \"\";\r\n      break;\r\n  }\r\n\r\n  return (\r\n    <div\r\n      className=\"custom-div\"\r\n      style={{ opacity: status === \"completed\" ? \"0.9\" : \"1\" }}\r\n    >\r\n      <h1>{title}</h1>\r\n      <p className=\"project-status\">{status}</p>\r\n      <button\r\n        style={{ background: status === \"completed\" ? \"#cd5c5c\" : \"\"}}\r\n        data-status={status}\r\n        className=\"change-status-button\"\r\n        onClick={handleIsDone}\r\n      >\r\n        {action}\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\r\n  updateStatus: (id: string, status: Status) =>\r\n    dispatch(updateProjectStatus({ id, status })),\r\n});\r\n\r\nexport default connect(null, mapDispatchToProps)(Project);\r\n","import { ProjectsTypes, UpdateProjectPayload } from \"../actionTypes/projectsActionTypes\";\r\n\r\nexport const addNewProject = (payload: string) => ({\r\n  type: ProjectsTypes.ADD_NEW_PROJECT,\r\n  payload,\r\n});\r\n\r\nexport const updateProjectStatus = (payload: UpdateProjectPayload) => ({\r\n  type: ProjectsTypes.UPDATE_PROJECT_STATUS,\r\n  payload,\r\n});\r\n","import \"@/styles/add-project-form.scss\";\r\n\r\nimport React, { FormEvent } from \"react\";\r\n\r\nimport { Dispatch } from \"redux\";\r\nimport { IProject } from \"../types/IProject\";\r\nimport { addNewProject } from \"../core/actionCreators/projectsActionCreators\";\r\nimport { connect } from \"react-redux\";\r\nimport useHandleFields from \"../hooks/useHandleFields\";\r\n\r\ninterface DispatchProps {\r\n  addProject(text: string): void;\r\n}\r\n\r\ntype ProjectForm = Pick<IProject, \"title\">;\r\n\r\nconst AddProjectForm: React.FC<DispatchProps> = ({ addProject }) => {\r\n  const [fields, handleFieldChange] = useHandleFields<ProjectForm>({\r\n    title: \"\",\r\n  });\r\n\r\n  const handleSubmit = (e: FormEvent) => {\r\n    e.preventDefault();\r\n    if (!fields) return;\r\n\r\n    addProject(fields.title);\r\n  };\r\n\r\n  return (\r\n    <form className=\"add-project-form\" action=\"submit\" onSubmit={handleSubmit}>\r\n      <input\r\n        name=\"title\"\r\n        type=\"text\"\r\n        value={fields.title}\r\n        placeholder=\"Enter project's name\"\r\n        onChange={handleFieldChange}\r\n        autoFocus\r\n      />\r\n      <button disabled={!fields.title.length} className=\"add-btn\" type=\"submit\">\r\n        Create\r\n      </button>\r\n    </form>\r\n  );\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\r\n  addProject: (text: string) => dispatch(addNewProject(text)),\r\n});\r\n\r\nexport default connect(null, mapDispatchToProps)(AddProjectForm);\r\n","import Container from \"../components/Container\";\r\nimport { type IProject } from \"../types/IProject\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport Project from \"../components/Project\";\r\nimport React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { AppState } from \"../core/reducers/rootReducer\";\r\n\r\nimport \"@/styles/projects-container.scss\";\r\nimport AddProjectForm from \"../components/AddProjectForm\";\r\n\r\ninterface StateProps {\r\n  projects: IProject[];\r\n}\r\n\r\ntype Props = StateProps;\r\n\r\nconst ProjectsPage: React.FC<Props> = ({ projects }) => {\r\n  return (\r\n    <Container>\r\n      <AddProjectForm />\r\n      <div className=\"projects-container\">\r\n        {projects.map((project: IProject) => (\r\n          <NavLink to={`/project/?id=${project.id}`} key={project.id}>\r\n            <Project id={project.id} title={project.title} status={project.status} />\r\n          </NavLink>\r\n        ))}\r\n      </div>\r\n    </Container>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state: AppState) => ({\r\n  projects: state.projects.data,\r\n});\r\n\r\nexport default connect(mapStateToProps, null)(ProjectsPage);\r\n"],"names":["_ref","children","_jsx","className","initialState","_useState","useState","_useState2","_slicedToArray","fields","setValues","event","_objectSpread","_defineProperty","target","name","value","connect","dispatch","updateStatus","id","status","payload","type","ProjectsTypes","UPDATE_PROJECT_STATUS","title","action","_jsxs","style","opacity","background","onClick","e","preventDefault","newStatus","checkStatus","addProject","text","ADD_NEW_PROJECT","_useHandleFields","useHandleFields","_useHandleFields2","handleFieldChange","onSubmit","placeholder","onChange","autoFocus","disabled","length","state","projects","data","Container","AddProjectForm","map","project","NavLink","to","concat","Project"],"sourceRoot":""}